var documenterSearchIndex = {"docs":
[{"location":"#GMMParameterEstimation.jl-Documentation","page":"GMMParameterEstimation.jl Documentation","title":"GMMParameterEstimation.jl Documentation","text":"","category":"section"},{"location":"#Introduction","page":"GMMParameterEstimation.jl Documentation","title":"Introduction","text":"","category":"section"},{"location":"","page":"GMMParameterEstimation.jl Documentation","title":"GMMParameterEstimation.jl Documentation","text":"GMMParameterEstimation.jl is a package for estimating the parameters of Gaussian k mixture models using the method of moments for k=2,3,4.","category":"page"},{"location":"","page":"GMMParameterEstimation.jl Documentation","title":"GMMParameterEstimation.jl Documentation","text":"","category":"page"},{"location":"#Example-of-basic-use","page":"GMMParameterEstimation.jl Documentation","title":"Example of basic use","text":"","category":"section"},{"location":"","page":"GMMParameterEstimation.jl Documentation","title":"GMMParameterEstimation.jl Documentation","text":"using GMMParameterEstimation\nd = 3\nk = 2\ndiagonal = true\nw, true_means, true_covariances = generateGaussians(d, k, diagonal)\nsample = getSample(num_samples, w, true_means, true_covariances)\npass, (mixing_coefficients, means, covariances) = estimate_parameters(d, k, sample, diagonal)","category":"page"},{"location":"#Parameter-estimation","page":"GMMParameterEstimation.jl Documentation","title":"Parameter estimation","text":"","category":"section"},{"location":"","page":"GMMParameterEstimation.jl Documentation","title":"GMMParameterEstimation.jl Documentation","text":"The main functionality of the package is the estimate_parameters function which estimates parameters for a Gaussian Mixture Model from a sample.","category":"page"},{"location":"","page":"GMMParameterEstimation.jl Documentation","title":"GMMParameterEstimation.jl Documentation","text":"estimate_parameters(d::Integer, k::Integer, sample::Array{Float64}, diagonal::Bool, w::Array{Float64})","category":"page"},{"location":"#GMMParameterEstimation.estimate_parameters-Tuple{Integer, Integer, Array{Float64}, Bool, Array{Float64}}","page":"GMMParameterEstimation.jl Documentation","title":"GMMParameterEstimation.estimate_parameters","text":"estimate_parameters(d::Integer, k::Integer, sample::Array{Float64}, diagonal::Bool, w::Array{Float64})\n\nCompute an estimate for the parameters of a d-dimensional Gaussian k-mixture model from a sample.\n\nIf diagonal is true, the covariance matrices are assumed to be diagonal. If w is provided it is taken as the mixing coefficients, otherwise those are computed as well. The sample should be a d x sample-size array.\n\n\n\n\n\n","category":"method"},{"location":"","page":"GMMParameterEstimation.jl Documentation","title":"GMMParameterEstimation.jl Documentation","text":"unknown_coefficients(d::Integer, k::Integer, w::Array{Float64}, true_means::Array{Float64,2}, true_covariances::Array{Float64,3}, diagonal::Bool)\nknown_coefficients(d::Integer, k::Integer, w::Array{Float64}, true_means::Array{Float64,2}, true_covariances::Array{Float64,3}, diagonal::Bool)","category":"page"},{"location":"#GMMParameterEstimation.unknown_coefficients-Tuple{Integer, Integer, Array{Float64}, Matrix{Float64}, Array{Float64, 3}, Bool}","page":"GMMParameterEstimation.jl Documentation","title":"GMMParameterEstimation.unknown_coefficients","text":"unknown_coefficients(d::Integer, k::Integer, w::Array{Float64}, true_means::Array{Float64,2}, true_covariances::Array{Float64,3}, diagonal::Bool)\n\nCompute parameters and build and solve times for the perfect moment, unknown mixing coefficients case.\n\nAssuming a d dimensional Gaussian k-mixture model with mixing coefficients w, means true_means, and covariances true_covariances.\n\n\n\n\n\n","category":"method"},{"location":"#GMMParameterEstimation.known_coefficients-Tuple{Integer, Integer, Array{Float64}, Matrix{Float64}, Array{Float64, 3}, Bool}","page":"GMMParameterEstimation.jl Documentation","title":"GMMParameterEstimation.known_coefficients","text":"known_coefficients(d::Integer, k::Integer, w::Array{Float64}, true_means::Array{Float64,2}, true_covariances::Array{Float64,3}, diagonal::Bool)\n\nCompute parameters for the perfect moment, known mixing coefficients case.\n\nAssuming a d dimensional Gaussian k-mixture model with mixing coefficients w, means true_means, and covariances true_covariances.\n\n\n\n\n\n","category":"method"},{"location":"#Generate-random-Gaussian-k-mixtures-and-samples","page":"GMMParameterEstimation.jl Documentation","title":"Generate random Gaussian k mixtures and samples","text":"","category":"section"},{"location":"","page":"GMMParameterEstimation.jl Documentation","title":"GMMParameterEstimation.jl Documentation","text":"Generating random Gaussian k mixtures and sampling from them can be useful for simulation.","category":"page"},{"location":"","page":"GMMParameterEstimation.jl Documentation","title":"GMMParameterEstimation.jl Documentation","text":"makeCovarianceMatrix(d::Integer, diagonal::Bool)\ngenerateGaussians(d::Integer, k::Integer, diagonal::Bool)\ngetSample(numb::Integer, w::Vector{Float64}, means::Matrix{Float64}, covariances::Array{Float64, 3})","category":"page"},{"location":"#GMMParameterEstimation.makeCovarianceMatrix-Tuple{Integer, Bool}","page":"GMMParameterEstimation.jl Documentation","title":"GMMParameterEstimation.makeCovarianceMatrix","text":"makeCovarianceMatrix(d::Integer, diagonal::Bool)\n\nGenerate random dxd covariance matrix.\n\nIf diagonal==true, returns a diagonal covariance matrix.\n\n\n\n\n\n","category":"method"},{"location":"#GMMParameterEstimation.generateGaussians-Tuple{Integer, Integer, Bool}","page":"GMMParameterEstimation.jl Documentation","title":"GMMParameterEstimation.generateGaussians","text":"generateGaussians(d::Integer, k::Integer, diagonal::Bool)\n\nGenerate means and covariances for k Gaussians with dimension d.\n\ndiagonal should be true for spherical case, and false for dense covariance matrices.\n\n\n\n\n\n","category":"method"},{"location":"#GMMParameterEstimation.getSample-Tuple{Integer, Vector{Float64}, Matrix{Float64}, Array{Float64, 3}}","page":"GMMParameterEstimation.jl Documentation","title":"GMMParameterEstimation.getSample","text":"getSample(numb::Integer, w::Vector{Float64}, means::Matrix{Float64}, covariances::Array{Float64, 3})\n\nGenerate a Gaussian mixture model sample with numb entries, mixing coefficients w, means means, and covariances covariances.\n\n\n\n\n\n","category":"method"},{"location":"#Build-the-polynomial-systems","page":"GMMParameterEstimation.jl Documentation","title":"Build the polynomial systems","text":"","category":"section"},{"location":"","page":"GMMParameterEstimation.jl Documentation","title":"GMMParameterEstimation.jl Documentation","text":"get1Dmoments(sample::Matrix{Float64}, dimension::Integer, m::Integer)","category":"page"},{"location":"#GMMParameterEstimation.get1Dmoments-Tuple{Matrix{Float64}, Integer, Integer}","page":"GMMParameterEstimation.jl Documentation","title":"GMMParameterEstimation.get1Dmoments","text":"get1Dmoments(sample::Matrix{Float64}, dimension::Integer, m::Integer)\n\nCompute the 1D sample moments 0 through m, for the given dimension of sample.\n\n\n\n\n\n","category":"method"},{"location":"","page":"GMMParameterEstimation.jl Documentation","title":"GMMParameterEstimation.jl Documentation","text":"build1DSystem(k::Integer, m::Integer, a::Union{Vector{Float64}, Vector{Variable}})","category":"page"},{"location":"#GMMParameterEstimation.build1DSystem-Tuple{Integer, Integer, Union{Vector{Float64}, Vector{Variable}}}","page":"GMMParameterEstimation.jl Documentation","title":"GMMParameterEstimation.build1DSystem","text":"build1DSystem(k::Integer, m::Integer, a::Union{Vector{Float64}, Vector{Variable}})\n\nBuild the polynomial system for a mixture of 1D Gaussians where 'm' is the highest desired moment.\n\nIf a is given, use a as the mixing coefficients, otherwise leave them as unknowns.\n\n\n\n\n\n","category":"method"},{"location":"","page":"GMMParameterEstimation.jl Documentation","title":"GMMParameterEstimation.jl Documentation","text":"tensorPower(tensor, power::Integer)\nconvert_indexing(moment_i, d)\nmixedMomentSystem(d, k, mixing, ms, vs)","category":"page"},{"location":"#GMMParameterEstimation.tensorPower-Tuple{Any, Integer}","page":"GMMParameterEstimation.jl Documentation","title":"GMMParameterEstimation.tensorPower","text":"tensorPower(tensor, power::Integer)\n\nCompute the power tensor power of tensor.\n\n\n\n\n\n","category":"method"},{"location":"#GMMParameterEstimation.convert_indexing-Tuple{Any, Any}","page":"GMMParameterEstimation.jl Documentation","title":"GMMParameterEstimation.convert_indexing","text":"convert_indexing(moment_i, d)\n\nConvert the d dimensional multivariate moment_i index to the corresponding tensor moment index.\n\n\n\n\n\n","category":"method"},{"location":"#GMMParameterEstimation.mixedMomentSystem-NTuple{5, Any}","page":"GMMParameterEstimation.jl Documentation","title":"GMMParameterEstimation.mixedMomentSystem","text":"mixedMomentSystem(d, k, mixing, ms, vs)\n\nBuild a linear system for finding the off-diagonal covariances entries.\n\nFor a d dimensional Gaussian k-mixture model with mixing coefficients mixing, means ms, and covariances vs where the diagonal entries have been filled in and the off diagonals are variables.\n\n\n\n\n\n","category":"method"},{"location":"#Index","page":"GMMParameterEstimation.jl Documentation","title":"Index","text":"","category":"section"},{"location":"","page":"GMMParameterEstimation.jl Documentation","title":"GMMParameterEstimation.jl Documentation","text":"","category":"page"}]
}
